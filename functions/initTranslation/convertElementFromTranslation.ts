import { NormalizedContentTypeElementType } from './loadContentType';
import { LanguageVariantElementsBuilder } from '@kontent-ai/management-sdk';

export const convertTranslatedElement = (
  data: string | ReadonlyArray<string>,
  restParts: ReadonlyArray<string>,
  elementId: string,
  elementType: NormalizedContentTypeElementType,
  builder: LanguageVariantElementsBuilder,
) => {
  switch (elementType) {
    case 'asset':
    case 'multiple_choice':
    case 'number':
    case 'taxonomy':
    case 'custom':
    case 'rich_text':
    case 'date_time':
      throw new Error(`Element of type ${elementType} is not translatable yet.`);
    case 'modular_content':
      return builder.linkedItemsElement({
        element: { id: elementId },
        value: (data as readonly string[]).map(id => ({ id })),
      });
    case 'url_slug': {
      const mode = restParts[0];
      if (!mode || (mode !== 'autogenerated' && mode !== 'custom')) {
        throw new Error(`Missing or invalid mode parsed for url slug element (${mode}).`);
      }
      return builder.urlSlugElement({
        element: { id: elementId },
        value: data as string,
        mode,
      });
    }
    case 'text':
      return builder.textElement({
        element: { id: elementId },
        value: data as string,
      });
    default:
      throw new Error(`Unknown element type ${elementType}.`);
  }
};
